{"version":3,"sources":["footer.js","login.js","home.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","href","target","Login","props","handleUsernameChange","event","setState","username","value","handlePasswordChange","password","handleSubmit","loading","preventDefault","login_portal","state","onSubmit","this","Form","Control","size","type","onChange","placeholder","Button","disabled","variant","React","Component","Home","useState","ShowLogin","window","open","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAeeA,MAZf,WACE,OACE,yBAAKC,UAAU,UACb,4BAAQA,UAAU,2CAChB,yBAAKA,UAAU,yBACX,iDAAwB,uBAAGA,UAAU,OAAOC,KAAK,oBAAoBC,OAAO,SAApD,mBAAxB,iD,uDC8CGC,E,kDAhDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAWVC,qBAAuB,SAACC,GACpB,EAAKC,SACD,CAAEC,SAAUF,EAAMJ,OAAOO,SAdd,EAkBnBC,qBAAuB,SAACJ,GACpB,EAAKC,SACD,CAAEI,SAAUL,EAAMJ,OAAOO,SApBd,EAwBnBG,aAAe,SAACN,GACZ,EAAKC,SACD,CAAEM,SAAS,IAEfP,EAAMQ,iBACN,EAAKC,aAAa,EAAKC,MAAMR,SAAU,EAAKQ,MAAML,WA1BlD,EAAKI,aAAeX,EAAMW,aAE1B,EAAKC,MAAQ,CACTH,SAAS,EACTL,SAAU,GACVG,SAAU,IARC,E,qDAiCjB,OACI,yBAAKX,UAAU,SACX,wBAAIA,UAAU,WAAd,+BAAwD,6BACxD,yBAAKA,UAAU,aACX,0BAAMiB,SAAUC,KAAKN,cACjB,kBAACO,EAAA,EAAKC,QAAN,CAAcC,KAAK,KAAKC,KAAK,OAAOb,MAASS,KAAKF,MAAMR,SAAUe,SAAUL,KAAKb,qBAAsBmB,YAAY,YAAW,6BAC9H,kBAACL,EAAA,EAAKC,QAAN,CAAcC,KAAK,KAAKC,KAAK,WAAWb,MAASS,KAAKF,MAAML,SAAUY,SAAUL,KAAKR,qBAAsBc,YAAY,aAAY,6BACnI,kBAACC,EAAA,EAAD,CAAQH,KAAK,SAASD,KAAK,KAAKK,SAAUR,KAAKF,MAAMH,QAASb,UAAU,YAAY2B,QAAQ,iBAAiBT,KAAKF,MAAMH,QAAU,mBAAgB,gB,GAzCpJe,IAAMC,WCgBXC,MAjBf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KASb,OATa,KAUT,yBAAKhC,UAAU,QACTgC,GAAa,kBAAC,EAAD,CAAOjB,aAR9B,SAAsBP,EAAUG,GAE9BsB,OAAOC,KAAK,kCCKDC,MATf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcoC,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a6c66ddd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <footer className=\"py-4 bg-dark text-white-50 fixed-bottom\">\r\n        <div className=\"container text-center\">\r\n            <small>Copyright &copy; <a className=\"link\" href=\"https://tinu.tech\" target=\"blank\">Tinu Vanapamula</a> *Not Affiliated with MCPS or Powerschool</small>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.login_portal = props.login_portal\r\n\r\n        this.state = {\r\n            loading: false,\r\n            username: \"\",\r\n            password: \"\"\r\n        };\r\n    }\r\n\r\n    handleUsernameChange = (event) => {\r\n        this.setState(\r\n            { username: event.target.value }\r\n        )\r\n    }\r\n    \r\n    handlePasswordChange = (event) => {\r\n        this.setState(\r\n            { password: event.target.value }\r\n        )\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        this.setState(\r\n            { loading: true }\r\n        )\r\n        event.preventDefault();\r\n        this.login_portal(this.state.username, this.state.password);\r\n    }\r\n\r\n  render(){\r\n      return (\r\n          <div className=\"Login\">\r\n              <h1 className=\"heading\">Login with MCPS Credentials</h1><br/>\r\n              <div className=\"login-div\">\r\n                  <form onSubmit={this.handleSubmit}>\r\n                      <Form.Control size=\"lg\" type=\"text\" value = {this.state.username} onChange={this.handleUsernameChange} placeholder=\"MCPS ID\"/><br/>\r\n                      <Form.Control size=\"lg\" type=\"password\" value = {this.state.password} onChange={this.handlePasswordChange} placeholder=\"Password\"/><br/>\r\n                      <Button type=\"submit\" size=\"lg\" disabled={this.state.loading} className=\"login-btn\" variant=\"outline-light\">{this.state.loading ? 'Logging inâ€¦' : 'Login'}</Button>\r\n                  </form>\r\n              </div>\r\n          </div>\r\n        );\r\n  }\r\n}\r\n\r\nexport default Login;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Login from \"./login\";\r\n\r\nfunction Home(){\r\n  const [ShowLogin, setShowLogin] = useState(true);\r\n\r\n  function login_portal(username, password) {\r\n    // setTimeout(() => setShowLogin(false), 5000);\r\n    window.open(\"https://portal.mcpsmd.net\");\r\n\r\n  }\r\n\r\n  return (\r\n      <div className=\"Home\">\r\n          { ShowLogin && <Login login_portal = {login_portal}/>}\r\n      </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport './App.css';\nimport Footer from \"./footer\";\nimport Home from \"./home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}