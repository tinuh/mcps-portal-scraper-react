{"version":3,"sources":["footer.js","login.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","href","target","Login","useState","isLoading","setLoading","useEffect","Promise","resolve","setTimeout","then","Form","Control","size","type","placeholder","Button","disabled","onClick","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6PAeeA,MAZf,WACE,OACE,yBAAKC,UAAU,UACb,4BAAQA,UAAU,2CAChB,yBAAKA,UAAU,yBACX,iDAAwB,uBAAGA,UAAU,OAAOC,KAAK,oBAAoBC,OAAO,SAApD,mBAAxB,iD,uBC4BGC,MA3Bf,WAAkB,IAAD,EACiBC,oBAAS,GAD1B,mBACRC,EADQ,KACGC,EADH,KAaf,OAVAC,qBAAU,WACJF,GAPG,IAAIG,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAQnCE,MAAK,WAClBL,GAAW,QAGd,CAACD,IAKF,yBAAKL,UAAU,SACb,wBAAIA,UAAY,WAAhB,+BAA0D,6BAC1D,yBAAKA,UAAU,aACX,kBAACY,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,QAAN,CAAcC,KAAO,KAAKC,KAAK,OAAQC,YAAY,YAAY,6BAC/D,kBAACJ,EAAA,EAAKC,QAAN,CAAcC,KAAO,KAAKC,KAAK,WAAWC,YAAY,aAAa,6BACnE,kBAACC,EAAA,EAAD,CAAQH,KAAO,KAAKI,SAAUb,EAAWc,QAAUd,EAA0B,KATnE,kBAAMC,GAAW,IASwDN,UAAY,YAAYoB,QAAQ,iBAAiBf,EAAY,mBAAgB,aCf7JgB,MATf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.421e5f64.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"Footer\">\r\n      <footer className=\"py-4 bg-dark text-white-50 fixed-bottom\">\r\n        <div className=\"container text-center\">\r\n            <small>Copyright &copy; <a className=\"link\" href=\"https://tinu.tech\" target=\"blank\">Tinu Vanapamula</a> *Not Affiliated with MCPS or Powerschool</small>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction login_scrape(){\r\n    return new Promise((resolve) => setTimeout(resolve, 2000));\r\n}\r\n\r\nfunction Login() {\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      login_scrape().then(() => {\r\n        setLoading(false);\r\n      });\r\n    }\r\n  }, [isLoading]);\r\n\r\n  const handleClick = () => setLoading(true);\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <h1 className = \"heading\">Login with MCPS Credentials</h1><br />\r\n      <div className=\"login-div\">\r\n          <Form>\r\n            <Form.Control size = \"lg\" type=\"text\"  placeholder=\"MCPS ID\" /><br />\r\n            <Form.Control size = \"lg\" type=\"password\" placeholder=\"Password\" /><br />\r\n            <Button size = \"lg\" disabled={isLoading} onClick={!isLoading ? handleClick : null} className = \"login-btn\" variant=\"outline-light\">{isLoading ? 'Logging inâ€¦' : 'Login'}</Button>\r\n          </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport './App.css';\nimport Footer from \"./footer\";\nimport Login from \"./login\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Login />\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}